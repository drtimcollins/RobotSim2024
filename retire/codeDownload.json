{"cmd":"g++ -std=c++20 -O2 -pthread main.cpp && ./a.out << EOF\n80.8 87.6 1201.3 656.7 600 1201.3 464.9 1181.3 465.1 1201.0 455.1 1181.0 456.0 1200.4 445.3 1180.4 446.8 1199.5 435.5 1179.6 437.7 1198.2 425.7 1178.4 428.7 1196.6 416.0 1176.9 419.7 1194.6 406.4 1175.0 410.9 1192.2 396.9 1172.9 402.1 1189.5 387.6 1170.4 393.6 1186.4 378.4 1167.6 385.2 1183.0 369.4 1164.4 377.0 1179.1 360.6 1160.9 369.0 1174.9 352.0 1157.1 361.3 1170.2 343.6 1153.0 353.8 1165.2 335.5 1148.5 346.6 1159.7 327.8 1143.6 339.8 1153.8 320.3 1138.5 333.2 1147.5 313.2 1133.0 327.0 1140.8 306.5 1127.1 321.2 1133.6 300.2 1120.9 315.7 1126.0 294.4 1114.3 310.6 1117.9 289.0 1107.3 306.0 1109.4 284.1 1100.0 301.7 1100.5 279.7 1092.3 298.0 1091.2 275.9 1084.2 294.6 1081.4 272.6 1075.7 291.8 1071.2 269.9 1066.8 289.5 1060.5 267.9 1057.4 287.7 1049.5 266.5 1047.6 286.5 1038.0 265.8 1037.3 285.8 1026.1 265.7 1026.6 285.8 1014.3 266.3 1015.8 286.3 1002.8 267.5 1005.3 287.4 991.6 269.2 995.1 289.0 980.8 271.5 985.3 291.0 970.3 274.1 975.7 293.4 960.2 277.3 966.4 296.3 950.3 280.8 957.4 299.5 940.7 284.6 948.5 303.1 931.4 288.8 939.9 306.9 922.4 293.2 931.4 311.1 913.6 297.8 923.2 315.4 905.0 302.7 915.0 320.0 896.6 307.7 907.0 324.8 888.4 312.7 899.1 329.7 880.4 317.9 891.4 334.7 872.5 323.1 883.7 339.8 864.8 328.3 876.0 344.9 857.2 333.5 868.4 350.1 849.7 338.6 860.9 355.2 842.2 343.6 853.3 360.3 834.9 348.4 845.8 365.2 827.6 353.1 838.2 370.1 820.3 357.5 830.6 374.7 813.1 361.7 822.9 379.2 805.9 365.7 815.2 383.4 798.7 369.3 807.3 387.4 791.5 372.5 799.3 391.0 784.2 375.4 791.2 394.2 776.9 377.9 782.9 397.1 769.5 380.0 774.5 399.4 761.9 381.8 766.4 401.4 754.6 383.4 758.6 403.1 747.5 384.8 751.0 404.5 740.6 385.9 743.6 405.7 734.0 386.8 736.4 406.7 727.6 387.5 729.5 407.5 721.4 388.0 722.7 408.0 715.5 388.3 716.1 408.3 709.7 388.4 709.7 408.4 704.2 388.3 703.5 408.3 698.8 388.0 697.4 408.0 693.5 387.5 691.4 407.5 688.4 386.9 685.6 406.8 683.5 386.1 680.0 405.9 678.6 385.2 674.4 404.8 673.9 384.1 669.0 403.5 669.3 382.8 663.7 402.1 664.7 381.4 658.5 400.5 660.2 379.9 653.4 398.7 655.8 378.2 648.4 396.8 651.4 376.3 643.4 394.7 647.1 374.4 638.6 392.5 642.7 372.3 633.8 390.2 638.4 370.1 629.0 387.8 634.1 367.7 624.3 385.2 629.7 365.2 619.6 382.6 625.4 362.6 615.0 379.8 621.0 359.9 610.4 376.9 616.6 357.1 605.7 374.0 612.1 354.2 601.0 370.9 607.7 351.2 596.2 367.7 603.3 348.1 591.4 364.2 598.8 344.7 586.6 360.5 594.3 341.1 581.7 356.7 589.8 337.3 576.9 352.7 585.2 333.4 572.0 348.5 580.6 329.3 567.2 344.2 575.9 325.0 562.3 339.7 571.2 320.7 557.4 335.2 566.6 316.1 552.6 330.5 561.9 311.5 547.7 325.7 557.1 306.8 542.9 320.8 552.4 301.9 538.0 315.9 547.7 297.0 533.2 310.9 543.0 292.0 528.4 305.8 538.2 287.0 523.6 300.6 533.5 281.9 518.8 295.5 528.8 276.8 514.0 290.3 524.1 271.6 509.3 285.1 519.4 266.4 504.5 279.8 514.8 261.2 499.8 274.6 510.1 256.0 495.2 269.4 505.5 250.9 490.5 264.2 500.9 245.7 485.9 259.1 496.3 240.6 481.4 254.0 491.8 235.5 476.9 248.9 487.3 230.5 472.4 244.0 482.8 225.6 468.0 239.1 478.4 220.7 463.6 234.3 474.1 216.0 459.2 229.5 470.0 211.4 454.7 224.4 465.9 206.5 450.3 219.0 461.8 201.3 445.9 213.4 457.7 195.7 441.6 207.7 453.5 190.0 437.3 201.8 449.1 184.0 432.9 195.8 444.7 177.9 428.5 189.8 440.1 171.7 424.0 183.7 435.3 165.4 419.4 177.6 430.3 159.0 414.7 171.6 425.0 152.7 409.8 165.7 419.5 146.4 404.7 159.8 413.7 140.2 399.3 154.2 407.5 134.1 393.8 148.7 401.0 128.2 387.9 143.4 394.1 122.5 381.8 138.3 386.7 117.1 375.3 133.5 378.9 112.0 368.4 129.1 370.6 107.2 361.2 124.9 361.8 102.9 353.5 121.1 352.5 99.0 345.4 117.8 342.7 95.6 336.8 114.8 332.3 92.8 327.6 112.3 321.3 90.5 317.9 110.3 309.7 88.9 307.5 108.8 297.5 87.9 296.5 107.9 284.7 87.6 284.8 107.6 271.2 88.0 272.4 108.0 257.1 89.1 259.2 109.1 242.2 91.1 245.3 110.9 227.3 93.8 231.4 113.4 213.3 97.2 218.6 116.5 200.2 101.2 206.6 120.1 187.8 105.8 195.5 124.3 176.3 111.1 185.3 129.0 165.5 117.0 175.8 134.2 155.5 123.5 167.1 139.9 146.3 130.6 159.1 146.0 137.8 138.2 151.8 152.6 130.1 146.4 145.1 159.6 123.0 155.0 139.0 167.1 116.6 164.1 133.4 175.0 110.9 173.6 128.4 183.4 105.8 183.6 123.9 192.2 101.3 193.9 119.9 201.4 97.3 204.5 116.3 211.0 93.9 215.5 113.2 221.0 90.9 226.7 110.4 231.4 88.5 238.3 108.1 242.1 86.4 250.1 106.2 253.2 84.7 262.2 104.6 264.6 83.3 274.5 103.3 276.4 82.3 287.0 102.3 288.4 81.6 299.7 101.6 300.7 81.1 312.7 101.2 313.2 80.9 325.8 100.9 326.0 80.8 339.0 100.9 338.9 81.0 352.4 101.0 352.1 81.2 365.9 101.3 365.4 81.6 379.6 101.7 378.9 82.2 393.1 102.2 392.0 83.1 406.0 103.0 404.4 84.2 418.3 104.1 416.2 85.6 430.1 105.5 427.3 87.4 441.3 107.1 437.9 89.4 452.0 109.0 447.9 91.7 462.3 111.2 457.4 94.3 472.0 113.6 466.4 97.3 481.4 116.3 475.0 100.5 490.3 119.2 483.0 104.0 498.8 122.4 490.7 107.9 507.0 125.8 498.0 112.0 514.8 129.5 504.9 116.5 522.2 133.4 511.5 121.2 529.3 137.6 517.8 126.3 536.2 142.1 523.9 131.6 542.7 146.9 529.7 137.2 549.0 151.9 535.4 143.1 555.1 157.2 540.8 149.3 561.0 162.8 546.2 155.7 566.6 168.7 551.4 162.4 572.2 174.9 556.5 169.4 577.6 181.4 561.5 176.6 582.8 188.3 566.5 184.1 588.1 195.4 571.5 191.9 593.2 202.8 576.5 199.9 598.4 210.6 581.5 208.1 603.6 218.7 586.5 216.7 608.8 227.0 591.6 225.6 614.1 235.6 596.7 235.2 619.4 244.3 601.6 245.4 624.3 253.5 606.0 256.1 628.7 263.3 610.0 267.3 632.7 273.7 613.7 278.9 636.3 284.5 617.1 290.9 639.6 295.8 620.1 303.3 642.4 307.6 622.8 316.1 645.0 319.7 625.3 329.1 647.2 332.3 627.4 342.5 649.2 345.2 629.3 356.1 650.8 358.4 630.9 370.0 652.2 371.9 632.3 384.1 653.4 385.6 633.4 398.4 654.4 399.6 634.4 412.8 655.2 413.8 635.1 427.4 655.7 428.1 635.7 442.1 656.2 442.6 636.1 456.8 656.5 457.1 636.4 471.6 656.6 471.7 636.6 486.4 656.7 486.4 636.7 501.2 656.7 501.1 636.6 516.0 656.6 515.8 636.5 530.6 656.4 530.4 636.4 545.2 656.2 545.0 636.2 559.7 656.0 559.4 636.0 574.0 655.8 573.7 635.8 588.1 655.6 587.8 635.6 602.0 655.4 601.8 635.4 615.6 655.3 615.5 635.3 629.0 655.3 629.0 635.3 642.2 655.3 642.2 635.2 655.2 655.3 655.2 635.2 668.1 655.3 668.1 635.2 680.9 655.2 680.8 635.2 693.5 655.2 693.5 635.2 706.0 655.2 706.0 635.1 718.4 655.1 718.3 635.1 730.7 655.1 730.6 635.1 742.9 655.0 742.8 635.0 755.0 655.0 754.9 634.9 767.1 654.9 767.0 634.9 779.1 654.9 779.0 634.8 791.0 654.8 790.9 634.7 802.9 654.7 802.8 634.6 814.8 654.6 814.7 634.5 826.7 654.5 826.5 634.4 838.5 654.4 838.4 634.3 850.4 654.3 850.2 634.2 862.3 654.1 862.1 634.1 874.2 654.0 873.9 634.0 886.1 653.9 885.9 633.8 898.1 653.7 897.8 633.7 910.1 653.6 909.8 633.5 922.2 653.4 921.9 633.4 934.3 653.2 934.0 633.2 946.6 653.1 946.3 633.0 958.9 652.9 958.6 632.8 971.3 652.7 971.0 632.6 983.9 652.5 983.5 632.4 996.6 652.3 996.1 632.2 1009.5 651.8 1008.3 631.8 1022.1 650.8 1020.0 630.8 1034.2 649.2 1031.3 629.4 1046.1 647.2 1042.2 627.5 1057.5 644.7 1052.7 625.2 1068.5 641.7 1062.7 622.5 1079.1 638.2 1072.4 619.3 1089.3 634.3 1081.6 615.8 1099.1 630.0 1090.5 611.9 1108.5 625.2 1098.9 607.6 1117.4 620.0 1106.9 603.0 1126.0 614.5 1114.5 598.0 1134.1 608.5 1121.7 592.7 1141.7 602.2 1128.5 587.1 1148.9 595.5 1134.9 581.2 1155.7 588.5 1140.9 575.0 1162.0 581.2 1146.5 568.6 1167.9 573.6 1151.6 561.8 1173.3 565.7 1156.4 554.9 1178.2 557.5 1160.8 547.7 1182.7 549.1 1164.7 540.2 1186.6 540.5 1168.2 532.6 1190.2 531.6 1171.3 524.7 1193.2 522.6 1174.0 516.7 1195.7 513.3 1176.3 508.5 1197.8 503.9 1178.1 500.1 1199.4 494.3 1179.6 491.5 1200.5 484.6 1180.6 482.9 1201.2 474.8 1181.1 474.0\nEOF","src":"#include <iostream>\r\n#include <complex>\r\n#include <iomanip>\r\n//#include <string>\r\n//#include <sstream>\r\n#define width 95\n#define rlength 100\n#define NumberOfSensors 1\n#define SensorSpacing 15\n#define WheelRadius 20\n#define XSTART 540\n#define YSTART 643\n#define ISTART 483\r\n#define black_threshold 100\r\nusing namespace std;\r\n\r\ncomplex<double> bearing\t(1.0, 0);\r\ncomplex<double> R\t\t(1.0, 0);\r\ncomplex<double> L\t\t(1.0, 0);\r\ncomplex<double> speed\t(0, 0);\r\ncomplex<double> av\t\t(0, 0);\r\ncomplex<double> xy\t\t(XSTART, YSTART);\r\ncomplex<double> vv, cFront;\r\ncomplex<double> j\t\t(0, 1);\r\ncomplex<double> sensorPos[NumberOfSensors];\r\nint an[NumberOfSensors];\r\ncomplex<double> *track;\r\nint N;\r\ncomplex<double> trackBounds[2];\r\nbool isLapValid = false;\r\n\r\nstring hexIt(int t){\r\n  ostringstream oss;\r\n  oss << setfill('0') << setw(4) << uppercase << hex << t;\r\n  string ret = oss.str();\r\n  return ret.substr(ret.length()-4, 4);\r\n}\r\nstring hexSensors(){\r\n    int z = 0;\r\n    for(int n = 0; n < NumberOfSensors; n++) z = (z >> 1) | ((an[n] > 0)?0x200:0);\r\n    ostringstream oss;\r\n    oss << setfill('0') << setw(3) << uppercase << hex << z;\r\n    return oss.str();    \r\n}\r\nstring toHex(){\r\n    return  hexIt((int)round(16.0 * (xy.real()-640.0))) + \r\n            hexIt((int)round(16.0 * (xy.imag()-360.0))) +\r\n            hexIt((int)round(10000.0 * arg(bearing))) +\r\n            hexIt((int)round(10000.0 * arg(L))) +\r\n            hexIt((int)round(10000.0 * arg(R))) +\r\n            hexSensors();\r\n}\r\nvoid readTrack(void);\r\nnamespace RobotControlCode{void RobotControl();}\r\nint signFn(double x, double y, complex<double> p2, complex<double> p3){\r\n\treturn ((x-real(p3))*(imag(p2)-imag(p3))-(real(p2)-real(p3))*(y-imag(p3)) > 0) ? 1 : -1;\r\n}\r\nbool isInQuad(double x, double y, int i0, int i1, int i2, int i3){\r\n\tint d0 = signFn(x, y, track[i0], track[i1]);\r\n\tint d1 = signFn(x, y, track[i1], track[i2]);\r\n\tint d2 = signFn(x, y, track[i2], track[i3]);\r\n\tint d3 = signFn(x, y, track[i3], track[i0]);\r\n\treturn (d0==d1 && d1==d2 && d2==d3);\r\n}\r\nint getSensorOutput(double x, double y){\r\n\tif(x < real(trackBounds[0]) || y < imag(trackBounds[0]) || x > real(trackBounds[1]) || y > imag(trackBounds[1]))\r\n\t\treturn 0;   \r\n\telse{\t\t\r\n\t\tfor(int n = 0; n < N/2; n++){\r\n\t\t\tif(isInQuad(x, y, n*2, n*2+1, (n*2+3)%N, (n*2+2)%N))\r\n\t\t\t\treturn 0xFFFFFF;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n}\r\nvoid updateSensors(void){\r\n\tcomplex<double> sn;\r\n\tfor(int n = 0; n < NumberOfSensors; n++) {\r\n\t\tsn = sensorPos[n]*bearing + xy; \r\n\t\tan[n] = getSensorOutput(real(sn),imag(sn));\r\n\t}        \r\n}\t\r\nint main(){\t\r\n\tcout << \"###OK###\" << endl;\r\n\treadTrack();\r\n\tfor(int n = 0; n < NumberOfSensors; n++) {\r\n\t\tsensorPos[n] = complex<double> (rlength, (n - (NumberOfSensors-1.0)/2.0)*SensorSpacing);\r\n\t}\t\r\n\tint iTrack = 0;\r\n\tfor(int n = 0; n < 3000; n++){\r\n\t\tupdateSensors();\r\n\t\tRobotControlCode::RobotControl();\r\n\t\t//av = av*0.9 + speed*0.1;\t\r\n\t\tav = av*0.92 + speed*0.08;\t// angular velocity is av rad/frame or 50av rad/s\r\n\t\t//av = av*0.95 + speed*0.05;\r\n\t\t//av = av*0.97 + speed*0.03;\r\n\t\tvv = bearing * (double)WheelRadius*(real(av) + imag(av))/2.0;\r\n\t\tbearing *= exp(j*(double)WheelRadius*((real(av)-imag(av))/width));\r\n\t\tcFront = xy + bearing * (double)rlength;\r\n\t\twhile(abs(cFront - track[(iTrack+ISTART)%N]) < 150.0){\r\n\t\t\tiTrack++;\r\n\t\t\tif(iTrack > N){\r\n\t\t\t\tiTrack = 0;\r\n\t\t\t\tisLapValid = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(real(cFront) < XSTART+rlength && real(cFront+vv) >= XSTART+rlength && imag(cFront) > YSTART-50 && isLapValid){\r\n\t\t\tcout << \"L \" << n << endl;\r\n\t\t\tisLapValid = false;\r\n\t\t}\r\n\r\n\t\txy += vv;\r\n\t\tL *= exp(-j*(real(av)));\t// wheel speed is av rad/frame = 50av rad/s\r\n\t\tR *= exp(-j*(imag(av)));\r\n\t\tcout << toHex() << endl;\r\n\t}\r\n\tdelete[] track;\r\n\treturn 0;\t\r\n}\r\nvoid readTrack(void){\r\n\tdouble r, i;\r\n\tfor(int n = 0; n < 2; n++){\r\n\t\tcin >> r >> i;\t\r\n\t\ttrackBounds[n] = complex<double>(r,i);\r\n\t}\r\n\tcin >> N;\r\n\ttrack = new complex<double>[N];\r\n\tfor(int n = 0; n < N; n++){\r\n\t\tcin >> r >> i;\t\r\n\t\ttrack[n] = complex<double>(r,i);\r\n\t}\r\n}\r\nvoid Set_PWM(int n, double spNew){\r\n/*\tdouble sp = spNew;\r\n\tsp = (sp >= 0) ? sp : 0;\r\n\tsp = (sp <= 8191) ? sp : 8191;*/\r\n\tint spI = ((int)spNew) & 0x1FFF;\r\n\tdouble sp = (double)spI;\r\n\tif(n == 0)\r\n\t\tspeed = complex<double>(sp / 16000.0, imag(speed));\r\n\telse\r\n\t\tspeed = complex<double>(real(speed), sp / 16000.0);\r\n}\r\nnamespace RobotControlCode{\r\nvoid RobotControl()\n{\n\tif(an[0] > black_threshold)\n\t{\n\t\tSet_PWM(0, 0);\t\t// Motor 0 stop\n\t\tSet_PWM(1, 2000);\t// Motor 1 go\n\t}\n\telse\n\t{\n\t\tSet_PWM(0, 2000);\t// Motor 0 go\n\t\tSet_PWM(1, 0);\t\t// Motor 1 stop\n\t}\n}\n\t\t\t\r\n}"}