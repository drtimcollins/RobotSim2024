[
    {"width":70,"length":130,"WheelRadius":24,"NumberOfSensors":2,"SensorSpacing":15,"BodyColour":"c53916","WheelColour":"747b79","LEDColour":"yellow","Code":"import robot\n\nrobot.motors(50000, 50000)\n\ndef RobotControl():\n\tan = robot.readsensors(2)\n\tif(an[0] > 16500 and an[1] > 16500):\n\t\trobot.motors(50000, 50000)\n\telif(an[0] > 16500 and an[1] <= 16500):\n\t\trobot.motors(35000, 60000)\n\telif(an[0] <= 16500 and an[1] > 16500):\n\t\trobot.motors(60000, 35000)\n\nrobot.timer(frequency = 50, callback = RobotControl)\n\t\t\t"},
    {"width":95,"length":120,"WheelRadius":20,"NumberOfSensors":4,"SensorSpacing":15,"BodyColour":"085e34","WheelColour":"404540","LEDColour":"blue","Code":"import robot\n\nA = [150000, 70000]\nerror = 0\nlastError = 0\nblack_threshold = 16500\n\ndef limiter(x):\n\treturn min(max(x, 0), 65535)\n\ndef RobotControl():\n\tglobal lastError\n\tan = robot.readsensors(4)\n\terror = 0\n\tN = 0\n\tfor n in range(4):\n\t\tif(an[n] > black_threshold):\n\t\t\terror += n - 1.5\n\t\t\tN += 1\n\tif(N == 0):\n\t\terror = lastError * 1.1\n\telse:\n\t\terror = error / N\n\n\trobot.motor(0, limiter(65000 + error*A[0] + A[1]*(error - lastError)))\n\trobot.motor(1, limiter(65000 - error*A[0] - A[1]*(error - lastError)))\n\n\tlastError = error\n\nrobot.timer(frequency = 50, callback = RobotControl)\n\n"}
]